From 365270c316571d0d594e0a5c699b694682573015 Mon Sep 17 00:00:00 2001
From: Colin Ian King <colin.king@intel.com>
Date: Tue, 17 Jan 2023 13:02:35 +0000
Subject: [PATCH] md/raid6 algorithms: scale test duration for speedier boots

The original code runs for a set run time based on the duration of
2 ^ RAID6_TIME_JIFFIES_LG2. The default kernel value for
RAID6_TIME_JIFFIES_LG2 is 4, however, emperical testing shows that a
value of 3.5 for RAID6_TIME_JIFFIES_LG2 is the sweet spot for getting
consistent benchmarking results and reducing up the calibration run time
by 29.4%.

To achieve 2^3.5 we use the following:
   2^3.5 = 2^4 / 2^0.5
         = 2^4 / sqrt(2)
         = 2^4 * 0.707106781

Too keep this as integer math that is as accurate as required and avoiding
overflow, this becomes:
         = 2^4 * 181 / 256
         = (2^4 * 181) >> 8

We also need to scale down perf by the same factor, however, to
get a good approximate integer result without an overflow we scale
by 2^4.0 * sqrt(2) =
         = 2 ^ 4 * 1.41421356237
         = 2 ^ 4 * 1448 / 1024
         = (2 ^ 4 * 1448) >> 10

Tested on an Alderlake i9-12900, reduced raid6 calibration on boot
from 68000 microseconds to 48000 microseconds, saving 0.02 seconds.
Testing by booting 5 times and double checking the algorithm
chosen is the same as pre-optimised version.

Originally used in Ubuntu (written by Colin Ian King) and forward ported
to 6.1 kernels.

Signed-off-by: Colin Ian King <colin.king@intel.com>
---
 lib/raid6/algos.c | 19 +++++++++++--------
 1 file changed, 11 insertions(+), 8 deletions(-)

diff --git a/lib/raid6/algos.c b/lib/raid6/algos.c
index 39b74221f4a7..26af5ffeda29 100644
--- a/lib/raid6/algos.c
+++ b/lib/raid6/algos.c
@@ -149,9 +149,12 @@ static inline const struct raid6_calls *raid6_choose_gen(
 	int start = (disks>>1)-1, stop = disks-3;	/* work on the second half of the disks */
 	const struct raid6_calls *const *algo;
 	const struct raid6_calls *best;
+	/* Scaled by 2 ^ (RAID6_TIME_JIFFIES_LG2 - 0.5) */
+	const unsigned long raid6_time_jiffies = ((1 << RAID6_TIME_JIFFIES_LG2) * 181) >> 8;
 
 	for (bestgenperf = 0, best = NULL, algo = raid6_algos; *algo; algo++) {
 		if (!best || (*algo)->priority >= best->priority) {
+
 			if ((*algo)->valid && !(*algo)->valid())
 				continue;
 
@@ -167,7 +170,7 @@ static inline const struct raid6_calls *raid6_choose_gen(
 			while ((j1 = jiffies) == j0)
 				cpu_relax();
 			while (time_before(jiffies,
-					    j1 + (1<<RAID6_TIME_JIFFIES_LG2))) {
+					    j1 + raid6_time_jiffies)) {
 				(*algo)->gen_syndrome(disks, PAGE_SIZE, *dptrs);
 				perf++;
 			}
@@ -178,8 +181,8 @@ static inline const struct raid6_calls *raid6_choose_gen(
 				best = *algo;
 			}
 			pr_info("raid6: %-8s gen() %5ld MB/s\n", (*algo)->name,
-				(perf * HZ * (disks-2)) >>
-				(20 - PAGE_SHIFT + RAID6_TIME_JIFFIES_LG2));
+				(((perf * HZ * (disks-2)) >>
+				(20 - PAGE_SHIFT + RAID6_TIME_JIFFIES_LG2)) * 1448) >> 10);
 		}
 	}
 
@@ -198,8 +201,8 @@ static inline const struct raid6_calls *raid6_choose_gen(
 
 	pr_info("raid6: using algorithm %s gen() %ld MB/s\n",
 		best->name,
-		(bestgenperf * HZ * (disks - 2)) >>
-		(20 - PAGE_SHIFT + RAID6_TIME_JIFFIES_LG2));
+		(((bestgenperf * HZ * (disks - 2)) >>
+		   (20 - PAGE_SHIFT + RAID6_TIME_JIFFIES_LG2 + 1)) * 1448) >> 10);
 
 	if (best->xor_syndrome) {
 		perf = 0;
@@ -209,7 +212,7 @@ static inline const struct raid6_calls *raid6_choose_gen(
 		while ((j1 = jiffies) == j0)
 			cpu_relax();
 		while (time_before(jiffies,
-				   j1 + (1 << RAID6_TIME_JIFFIES_LG2))) {
+				   j1 + raid6_time_jiffies)) {
 			best->xor_syndrome(disks, start, stop,
 					   PAGE_SIZE, *dptrs);
 			perf++;
@@ -217,8 +220,8 @@ static inline const struct raid6_calls *raid6_choose_gen(
 		preempt_enable();
 
 		pr_info("raid6: .... xor() %ld MB/s, rmw enabled\n",
-			(perf * HZ * (disks - 2)) >>
-			(20 - PAGE_SHIFT + RAID6_TIME_JIFFIES_LG2 + 1));
+			(((perf * HZ * (disks - 2)) >>
+			   (20 - PAGE_SHIFT + RAID6_TIME_JIFFIES_LG2 + 1)) * 1448) >> 10);
 	}
 
 out:
-- 
2.39.0

